from aiogram import Router, F, types
from aiogram.types import Message, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, \
    KeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.utils.formatting import as_marked_section, Bold
import asyncio
import logging


from new.database import async_session
from new.models import Lot, LotImage, LotStatus
from new.states import SellerStates
from new.config import settings
from new.auctions.logic import start_auction

from sqlalchemy import select
from sqlalchemy.orm import selectinload

logger = logging.getLogger(__name__)
router = Router()

def is_unique_photo(file_bytes: bytes, existing_hashes: set) -> bool:
    import hashlib
    photo_hash = hashlib.md5(file_bytes).hexdigest()
    if photo_hash in existing_hashes:
        return False
    existing_hashes.add(photo_hash)
    return True

async def return_to_preview(message: Message, state: FSMContext):
    await show_confirmation(message, state)

DEVICE_MODELS = {
    "iPhone 13": 30000,
    "iPhone 14": 40000,
    "iPhone 15 Pro": 60000,
    "Samsung S21": 28000,
    "Samsung S24 Ultra": 50000,
}

# reply keyboard (fallback / –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

# main_menu_inline = InlineKeyboardMarkup(
#     inline_keyboard=[
#         [InlineKeyboardButton(text="üì§ –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å", callback_data="start_sell")],
#         [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤", callback_data="list_auctions")],
#         [InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
#         [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/username_support")]
#     ]
# )
#
# @router.callback_query(F.data == "start_sell")
# async def alert_info(callback: types.CallbackQuery, state: FSMContext):
#     # –ü–æ–∫–∞–∂–µ–º –∞–ª–µ—Ä—Ç —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
#     await callback.answer(
#         "‚ÑπÔ∏è –ê—É–∫—Ü–∏–æ–Ω ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –±—ã—Å—Ç—Ä–æ –∏ –≤—ã–≥–æ–¥–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω. "
#         "–õ–æ—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ, –∏ –¥–∏–ª–µ—Ä—ã –¥–µ–ª–∞—é—Ç —Å—Ç–∞–≤–∫–∏.\n\n"
#         "‚è≥ –¢–æ—Ä–≥–∏ –¥–ª—è—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.",
#         show_alert=True
#     )
#     # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
#     await show_model_keyboard(callback)
#     await state.set_state(SellerStates.title)
#

# ---------- Start selling ----------
@router.message(Command("sell"))
@router.message(F.text == "üì§ –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å")
async def start_selling(message: Message, state: FSMContext):
    await message.answer(

        "‚ÑπÔ∏è –ê—É–∫—Ü–∏–æ–Ω ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –≤—ã–≥–æ–¥–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n\n"
        "üì± –£–°–õ–û–í–ò–Ø –î–õ–Ø –ü–†–û–î–ê–í–¶–ê"
        "1. –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –∑–∞–∫–æ–Ω–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –≤–∞–º.\n\n"
        "2. –í—ã –Ω–µ—Å–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∑–∞–∫–æ–Ω–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–ø–∏—Å–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞.(–º–æ–¥–µ–ª—å, —Ñ–æ—Ç–æ, IMEI, —Å–æ—Å—Ç–æ—è–Ω–∏–µ).\n\n"
        "3. –°–¥–µ–ª–∫–∞ –∏ —Ä–∞—Å—á—ë—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∞—É–∫—Ü–∏–æ–Ω–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º).\n\n"
        "4.–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –û—Ñ–µ—Ä—Ç—ã (—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–∞–≤–∏–ª–∞).\n\n\n"
        "‚ùó –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ—Ç –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è!"
    )
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ–¥–∞–∂–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    await show_model_keyboard(message)
    await state.set_state(SellerStates.title)

async def show_model_keyboard(message_or_callback, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏. –ï—Å–ª–∏ edit=True –∏ –ø–µ—Ä–µ–¥–∞–Ω CallbackQuery ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    buttons = []
    row = []
    for i, model in enumerate(DEVICE_MODELS, start=1):
        row.append(InlineKeyboardButton(text=model, callback_data=f"model_{model}"))
        if i % 2 == 0 or i == len(DEVICE_MODELS):
            buttons.append(row)
            row = []

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    try:
        if edit and isinstance(message_or_callback, types.CallbackQuery) and message_or_callback.message:
            # –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_or_callback.message.edit_text("üì± –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=kb)
        else:
            await message_or_callback.answer("üì± –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=kb)
    except Exception as e:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        logger.debug("show_model_keyboard: edit failed, sending new message", exc_info=e)
        await message_or_callback.answer("üì± –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=kb)

# ---------- Model selected ----------
@router.callback_query(F.data.startswith("model_"))
async def model_selected(callback: types.CallbackQuery, state: FSMContext):
    model_name = callback.data.split("model_", 1)[1]
    start_price = DEVICE_MODELS.get(model_name)
    if start_price is None:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.", show_alert=True)
        return

    await state.update_data(title=model_name, start_price=start_price)
    # delete previous bot message with options if exist
    try:
        await callback.message.delete()
    except Exception:
        pass

    await callback.message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{model_name}</b>\nüí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price}‚ÇΩ",
        parse_mode="HTML"
    )

    # ask for photos
    photos_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="photos_done")]
    ])
    await callback.message.answer("üì∏ 1. –ù–∞ –æ–¥–Ω–æ–π –∏–∑ —Ñ–æ—Ç–æ—Ä–≥–∞—Ñ–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å IMEI\n"
                                  "2. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ–æ—Ç–æ—Ä–≥–∞—Ñ–∏—è —Å–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–º, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±–µ–ª—ã–º, —ç–∫—Ä–∞–Ω–æ–º\n"
                                  "3. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω\n"
                                  "4. –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ñ–æ—Ç–æ –¥–µ—Ñ—Ñ–µ–∫—Ç–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å–≤—É—é—Ç)\n"
                                  " –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ ‚úÖ'.", reply_markup=photos_kb)
    await callback.answer("1.–ù–∞ –æ–¥–Ω–æ–π –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–º–µ—Ä IMEI !(–º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)", show_alert=True)
    await state.set_state(SellerStates.images)

# ---------- Add photo ----------
# @router.message(SellerStates.images, F.photo)
# async def add_photo(message: Message, state: FSMContext):
#     file_id = message.photo[-1].file_id
#     data = await state.get_data()
#     images = data.get("images", [])
#     images.append(file_id)
#     await state.update_data(images=images)
#     photos_kb = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="photos_done")]
#     ])
#     await message.answer("üì∑ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ì–æ—Ç–æ–≤–æ ‚úÖ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ", reply_markup=photos_kb)
#
# # ---------- Photos done ----------
# @router.callback_query(F.data == "photos_done")
# async def photos_done(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     if not data.get("images"):
#         await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!", show_alert=True)
#         return
#     await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
#     await state.set_state(SellerStates.description)

@router.message(SellerStates.images, F.photo)
async def add_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    data = await state.get_data()
    images = data.get("images", [])
    images.append(file_id)
    await state.update_data(images=images)

    photos_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="photos_done")]
    ])

    await message.answer(
        f"üì∑ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(images)}/5). "
        f"{'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ì–æ—Ç–æ–≤–æ ‚úÖ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ' if len(images) >= 5 else '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ —Å–æ –≤—Å–µ–π –æ–ø–∏—Å–∞–Ω–Ω–æ–π –≤—ã—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π(–º–∏–Ω–∏–º—É–º 5 —Ñ–æ—Ç–æ).'}",
        reply_markup=photos_kb
    )


@router.callback_query(F.data == "photos_done")
async def photos_done(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    images = data.get("images", [])

    if len(images) < 5:
        await callback.answer(
            f"‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 —Ñ–æ—Ç–æ —Å–æ –≤—Å–µ–º–∏ –æ–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –≤—ã—à–µ —Å–≤–µ–¥–µ–Ω–∏—è–º–∏! –°–µ–π—á–∞—Å {len(images)}.",
            show_alert=True
        )
        return

    await callback.message.answer("‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–º—è—Ç–∏:")
    await state.set_state(SellerStates.memory)

@router.message(SellerStates.memory)
async def set_memory(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(memory=message.text)
    if data.get("edit_mode"):
        await return_to_preview(message, state)
    else:
        await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –ø–æ–∫—É–ø–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await state.set_state(SellerStates.year)

@router.message(SellerStates.year)
async def set_year(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(year=message.text)
    if data.get("edit_mode"):
        await return_to_preview(message, state)
    else:
        await message.answer("üì¶ –û–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await state.set_state(SellerStates.condition)

@router.message(SellerStates.condition)
async def set_condition(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(condition=message.text)
    if data.get("edit_mode"):
        await return_to_preview(message, state)
    else:
        await message.answer("üîã –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ (–≤ % –∏–ª–∏ —Å–ª–æ–≤–∞—Ö):")
        await state.set_state(SellerStates.battery)

@router.message(SellerStates.battery)
async def set_battery(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(battery=message.text)
    if data.get("edit_mode"):
        await return_to_preview(message, state)
    else:
        await message.answer("üõ† –ë—ã–ª –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ä–µ–º–æ–Ω—Ç–µ? (–î–∞/–ù–µ—Ç):")
        await state.set_state(SellerStates.repairs)

@router.message(SellerStates.repairs)
async def set_repairs(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(repairs=message.text)
    if data.get("edit_mode"):
        await return_to_preview(message, state)
    else:
        await message.answer("üíß –ü–∞–¥–∞–ª –ª–∏ –≤ –≤–æ–¥—É? (–î–∞/–ù–µ—Ç):")
        await state.set_state(SellerStates.water)

@router.message(SellerStates.water)
async def set_water(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(water=message.text)
    if data.get("edit_mode"):
        await return_to_preview(message, state)
    else:
        await message.answer("üîí –ù–µ—Ç –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Apple ID/Google? (–î–∞/–ù–µ—Ç):")
        await state.set_state(SellerStates.locks)


# ---------- Get description ----------
@router.message(SellerStates.locks)
async def get_description(message: Message, state: FSMContext):
    await state.update_data(locks=message.text)
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ–ø—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_confirmation(message, state)

# ---------- Show confirmation (preview) ----------
async def show_confirmation(message_or_callback, state: FSMContext):
    # data = await state.get_data()
    #
    # # Defensive read ‚Äî don't assume keys exist
    # title = data.get("title")
    # description = data.get("description")
    # start_price = data.get("start_price")
    # images = data.get("images", [])
    #
    # # –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # if not title or not description or not start_price:
    #     # –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    #     text = "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ."
    #     try:
    #         if isinstance(message_or_callback, types.CallbackQuery):
    #             await message_or_callback.message.answer(text, reply_markup=main_menu)
    #         else:
    #             await message_or_callback.answer(text, reply_markup=main_menu)
    #     except Exception:
    #         logger.exception("show_confirmation: unable to notify user about missing data")
    #     await state.clear()
    #     return
    #
    # text = as_marked_section(
    #     Bold("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ—Ç–∞:"),
    #     f"üì± –ú–æ–¥–µ–ª—å: {title}",
    #     f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}",
    #     f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price}‚ÇΩ"
    # )
    #
    # kb = InlineKeyboardMarkup(inline_keyboard=[
    #     [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_publish")],
    #     [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="edit_model")],
    #     [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
    #     [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photos")]
    # ])
    data = await state.get_data()

    title = data.get("title")
    start_price = data.get("start_price")
    images = data.get("images", [])
    memory = data.get("memory")
    year = data.get("year")
    condition = data.get("condition")
    battery = data.get("battery")
    repairs = data.get("repairs")
    water = data.get("water")
    locks = data.get("locks")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not title or not start_price or not images or len(images) < 5:
        text = "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ 5. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        try:
            if isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.answer(text, reply_markup=main_menu)
            else:
                await message_or_callback.answer(text, reply_markup=main_menu)
        except Exception:
            logger.exception("show_confirmation: unable to notify user about missing data")
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    text = as_marked_section(
        Bold("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ—Ç–∞:"),
        f"üì± –ú–æ–¥–µ–ª—å: {title}",
        f"üíæ –ü–∞–º—è—Ç—å: {memory}",
        f"üìÖ –ì–æ–¥ –ø–æ–∫—É–ø–∫–∏: {year}",
        f"üì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}",
        f"üîã –ë–∞—Ç–∞—Ä–µ—è: {battery}",
        f"üõ† –†–µ–º–æ–Ω—Ç—ã: {repairs}",
        f"üíß –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –≤–æ–¥—É: {water}",
        f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {locks}",
        f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price}‚ÇΩ"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_publish")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="edit_memory")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–¥ –ø–æ–∫—É–ø–∫–∏", callback_data="edit_year")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data="edit_condition")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –±–∞—Ç–∞—Ä–µ—é", callback_data="edit_battery")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–º–æ–Ω—Ç—ã", callback_data="edit_repairs")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –≤–æ–¥—É", callback_data="edit_water")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", callback_data="edit_locks")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photos")]
    ])

    try:
        if isinstance(message_or_callback, types.CallbackQuery):
            # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            try:
                await message_or_callback.message.delete()
            except Exception:
                pass
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if images:
                try:
                    media = [InputMediaPhoto(media=img) for img in images[:10]]
                    await message_or_callback.message.answer_media_group(media)
                except Exception:
                    logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ media_group –≤ preview")
            await message_or_callback.message.answer(text.as_html(), parse_mode="HTML", reply_markup=kb)
        else:
            if images:
                try:
                    media = [InputMediaPhoto(media=img) for img in images[:10]]
                    await message_or_callback.answer_media_group(media)
                except Exception:
                    logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ media_group –≤ preview (message)")
            await message_or_callback.answer(text.as_html(), parse_mode="HTML", reply_markup=kb)
    except Exception:
        logger.exception("show_confirmation: failed to show preview to user")
        try:
            # fallback simple text
            await (message_or_callback.answer if not isinstance(message_or_callback, types.CallbackQuery) else message_or_callback.message.answer)(
                "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu
            )
        except Exception:
            pass

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –º—ã –≤ —Å—Ç–∞–¥–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ start_price –∫–∞–∫ legacy state)
    await state.update_data(edit_mode=False)
    await state.set_state(SellerStates.start_price)

# ---------- Edit handlers ----------
# @router.callback_query(F.data == "edit_model")
# async def edit_model(callback: types.CallbackQuery, state: FSMContext):
#     await state.update_data(edit_mode=True)
#     await show_model_keyboard(callback, edit=True)


@router.callback_query(F.data == "edit_photos")
async def edit_photos(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        # –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        logger.warning("edit_photos: no state data for user %s", callback.from_user.id)
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                                      reply_markup=main_menu)
        await state.clear()
        return
    await state.update_data(edit_mode=True, images=[])
    await callback.message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ (–º–∏–Ω–∏–º—É–º 5). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ ‚úÖ'.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="photos_done")]]
        )
    )
    await state.set_state(SellerStates.images)


@router.callback_query(F.data == "edit_memory")
async def edit_memory(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        # –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        logger.warning("edit_memory: no state data for user %s", callback.from_user.id)
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                                      reply_markup=main_menu)
        await state.clear()
        return
    await state.update_data(edit_mode=True)
    await callback.message.answer("‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–º—è—Ç–∏:")
    await state.set_state(SellerStates.memory)


@router.callback_query(F.data == "edit_year")
async def edit_year(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        # –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        logger.warning("edit_year: no state data for user %s", callback.from_user.id)
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                                      reply_markup=main_menu)
        await state.clear()
        return
    await state.update_data(edit_mode=True)
    await callback.message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –ø–æ–∫—É–ø–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(SellerStates.year)


@router.callback_query(F.data == "edit_condition")
async def edit_condition(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        # –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        logger.warning("edit_condition: no state data for user %s", callback.from_user.id)
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                                      reply_markup=main_menu)
        await state.clear()
        return
    await state.update_data(edit_mode=True)
    await callback.message.answer("üì¶ –û–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(SellerStates.condition)


@router.callback_query(F.data == "edit_battery")
async def edit_battery(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        # –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        logger.warning("edit_battery: no state data for user %s", callback.from_user.id)
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                                      reply_markup=main_menu)
        await state.clear()
        return
    await state.update_data(edit_mode=True)
    await callback.message.answer("üîã –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞:")
    await state.set_state(SellerStates.battery)


@router.callback_query(F.data == "edit_repairs")
async def edit_repairs(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        # –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        logger.warning("edit_repairs: no state data for user %s", callback.from_user.id)
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                                      reply_markup=main_menu)
        await state.clear()
        return
    await state.update_data(edit_mode=True)
    await callback.message.answer("üõ† –ë—ã–ª –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ä–µ–º–æ–Ω—Ç–µ? (–î–∞/–ù–µ—Ç):")
    await state.set_state(SellerStates.repairs)


@router.callback_query(F.data == "edit_water")
async def edit_water(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        # –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        logger.warning("edit_water: no state data for user %s", callback.from_user.id)
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                                      reply_markup=main_menu)
        await state.clear()
        return
    await state.update_data(edit_mode=True)
    await callback.message.answer("üíß –ü–∞–¥–∞–ª –ª–∏ –≤ –≤–æ–¥—É? (–î–∞/–ù–µ—Ç):")
    await state.set_state(SellerStates.water)


@router.callback_query(F.data == "edit_locks")
async def edit_locks(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        # –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        logger.warning("edit_locks: no state data for user %s", callback.from_user.id)
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                                      reply_markup=main_menu)
        await state.clear()
        return
    await state.update_data(edit_mode=True)
    await callback.message.answer("üîí –ù–µ—Ç –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Apple ID/Google? (–î–∞/–ù–µ—Ç):")
    await state.set_state(SellerStates.locks)







# @router.callback_query(F.data == "edit_model")
# async def edit_model(callback: types.CallbackQuery, state: FSMContext):
#     # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
#     await show_model_keyboard(callback, edit=True)
#     await state.set_state(SellerStates.title)
#
# @router.callback_query(F.data == "edit_description")
# async def edit_description(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     if not data:
#         # –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
#         logger.warning("edit_description: no state data for user %s", callback.from_user.id)
#         await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu)
#         await state.clear()
#         return
#     await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
#     await state.set_state(SellerStates.description)
#
# @router.callback_query(F.data == "edit_photos")
# async def edit_photos(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     if not data:
#         logger.warning("edit_photos: no state data for user %s", callback.from_user.id)
#         await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu)
#         await state.clear()
#         return
#     # —Å–±—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ –∏ –ø–æ–ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
#     await state.update_data(images=[])
#     photos_kb = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="photos_done")]
#     ])
#     await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ ‚úÖ'.", reply_markup=photos_kb)
#     await state.set_state(SellerStates.images)

# ---------- Confirm publish ----------
@router.callback_query(F.data == "confirm_publish")
async def confirm_publish(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = [
        "title", "start_price", "images",
        "memory", "year", "condition", "battery",
        "repairs", "water", "locks"
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
    missing = [f for f in required_fields if not data.get(f)]
    if missing or len(data.get("images", [])) < 5:
        logger.warning("confirm_publish: missing data for user %s: %s", callback.from_user.id, missing)
        try:
            await callback.message.answer(
                "‚ùå –õ–æ—Ç —É—Å—Ç–∞—Ä–µ–ª, –Ω–µ–ø–æ–ª–Ω—ã–π –∏–ª–∏ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ 5. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu
            )
        except Exception:
            try:
                await callback.answer("‚ùå –õ–æ—Ç —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π.", show_alert=True)
            except Exception:
                pass
        await state.clear()
        return

    title = data["title"]
    start_price = data["start_price"]
    images = data["images"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    full_description = (
        f"üíæ –ü–∞–º—è—Ç—å: {data['memory']}\n"
        f"üìÖ –ì–æ–¥ –ø–æ–∫—É–ø–∫–∏: {data['year']}\n"
        f"üì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {data['condition']}\n"
        f"üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {data['battery']}\n"
        f"üõ† –†–µ–º–æ–Ω—Ç: {data['repairs']}\n"
        f"üíß –ü–∞–¥–∞–ª –≤ –≤–æ–¥—É: {data['water']}\n"
        f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {data['locks']}"
    )

    try:
        async with async_session() as session:
            lot = Lot(
                title=data["title"],
                description="",  # –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Ç–æ–º
                start_price=data["start_price"],
                seller_id=callback.from_user.id,
                memory=data["memory"],
                year=data["year"],
                condition=data["condition"],
                battery=data["battery"],
                repairs=data["repairs"],
                water=data["water"],
                locks=data["locks"],
                status="pending"
            )
            session.add(lot)
            await session.flush()

            for file_id in images:
                session.add(LotImage(lot_id=lot.id, file_id=file_id))

            await session.commit()

            # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        await callback.message.answer("‚åõ –í–∞—à –ª–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.", reply_markup=main_menu)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        text = as_marked_section(
            Bold("üî• –ù–æ–≤—ã–π –ª–æ—Ç!"),
            f"üì± {title}",
            full_description,
            f"üí∞ –°—Ç–∞—Ä—Ç: {start_price}‚ÇΩ",
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {callback.from_user.id}"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{lot.id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{lot.id}")]
        ])

        if images:
            try:
                media = [InputMediaPhoto(media=img) for img in images[:10]]
                await callback.bot.send_media_group(chat_id=settings.moderator_chat_id, media=media)
            except Exception:
                logger.exception("confirm_publish: failed to send media_group to moder channel")


        await callback.bot.send_message(settings.moderator_chat_id, text.as_html(), reply_markup=kb)
    except Exception:
        logger.exception("confirm_publish: failed to send message to moder channel")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("approve_"))
async def approve_lot(callback: types.CallbackQuery):
    lot_id = int(callback.data.split("_")[1])
    async with async_session() as session:
        result = await session.execute(
            select(Lot).options(selectinload(Lot.images)).where(Lot.id == lot_id)
        )
        lot = result.scalar_one_or_none()
        logger.info("Approve pressed for lot_id=%s", lot_id)
        if not lot or lot.status != LotStatus.pending:
            await callback.answer("‚ö†Ô∏è –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
            return
        lot.status = LotStatus.approved
        await session.commit()

        images = [img.file_id for img in lot.images][:10]

    full_description = (
        f"üíæ –ü–∞–º—è—Ç—å: {lot.memory}\n"
        f"üìÖ –ì–æ–¥ –ø–æ–∫—É–ø–∫–∏: {lot.year}\n"
        f"üì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {lot.condition}\n"
        f"üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {lot.battery}\n"
        f"üõ† –†–µ–º–æ–Ω—Ç: {lot.repairs}\n"
        f"üíß –ü–∞–¥–∞–ª –≤ –≤–æ–¥—É: {lot.water}\n"
        f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {lot.locks}"
    )

    text = as_marked_section(
        Bold("üî• –ù–æ–≤—ã–π –ª–æ—Ç!"),
        f"üì± {lot.title}",
        full_description,
        f"üí∞ –°—Ç–∞—Ä—Ç: {lot.start_price}‚ÇΩ",
        f"‚è≥ –¢–æ—Ä–≥–∏ –Ω–∞—á–Ω—É—Ç—Å—è —á–µ—Ä–µ–∑ {settings.auction_duration_minutes} –º–∏–Ω—É—Ç."
    )


    if images:
        media = [InputMediaPhoto(media=img) for img in images]
        await callback.bot.send_media_group(chat_id=settings.auction_channel_id, media=media)

    await callback.bot.send_message(settings.auction_channel_id, text.as_html())

    # —Å—Ç–∞—Ä—Ç –∞—É–∫—Ü–∏–æ–Ω–∞
    asyncio.create_task(start_auction(lot.id, callback.bot))
    bot = callback.bot
    await bot.send_message(lot.seller_id, f"‚úÖ –õ–æ—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –¢–æ—Ä–≥–∏ –Ω–∞—á–Ω—É—Ç—Å—è —á–µ—Ä–µ–∑ {settings.auction_duration_minutes} –º–∏–Ω—É—Ç")
    await callback.answer(f"‚úÖ –õ–æ—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –¢–æ—Ä–≥–∏ –Ω–∞—á–Ω—É—Ç—Å—è —á–µ—Ä–µ–∑ {settings.auction_duration_minutes} –º–∏–Ω—É—Ç", show_alert=True)

@router.callback_query(F.data.startswith("reject_"))
async def reject_lot(callback: types.CallbackQuery):
    lot_id = int(callback.data.split("_")[1])

    async with async_session() as session:
        lot = await session.get(Lot, lot_id)
        if not lot or lot.status != LotStatus.pending:
            await callback.answer("‚ö†Ô∏è –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
            return

        lot.status = LotStatus.rejected
        await session.commit()

    bot = callback.bot
    await bot.send_message(lot.seller_id,"‚ùå–í–∞—à –ª–æ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    await callback.answer("‚ùå –õ–æ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω", show_alert=True)
# @router.callback_query(F.data == "confirm_publish")
# async def confirm_publish(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()

#
#     # –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
#     required = ["title", "description", "start_price"]
#     if not all(k in data and data[k] for k in required):
#         logger.warning("confirm_publish: missing data for user %s: %s", callback.from_user.id, data)
#         try:
#             await callback.message.answer("‚ùå –õ–æ—Ç —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu)
#         except Exception:
#             try:
#                 await callback.answer("‚ùå –õ–æ—Ç —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã.", show_alert=True)
#             except Exception:
#                 pass
#         await state.clear()
#         return
#
#     title = data["title"]
#     description = data["description"]
#     start_price = data["start_price"]
#     images = data.get("images", [])
#
#     try:
#         async with async_session() as session:
#             lot = Lot(
#                 title=title,
#                 description=description,
#                 start_price=start_price,
#                 seller_id=callback.from_user.id,
#             )
#             session.add(lot)
#             await session.flush()
#
#             for file_id in images:
#                 session.add(LotImage(lot_id=lot.id, file_id=file_id))
#
#             await session.commit()
#
#         # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –∫–∞–Ω–∞–ª
#         text = as_marked_section(
#             Bold("üî• –ù–æ–≤—ã–π –ª–æ—Ç!"),
#             f"üì± {title}",
#             f"üìù {description}",
#             f"üí∞ –°—Ç–∞—Ä—Ç: {start_price}‚ÇΩ",
#             f"‚è≥ –¢–æ—Ä–≥–∏ –Ω–∞—á–Ω—É—Ç—Å—è —á–µ—Ä–µ–∑ {settings.auction_duration_minutes} –º–∏–Ω—É—Ç."
#         )
#
#         if images:
#             try:
#                 media = [InputMediaPhoto(media=img) for img in images[:10]]
#                 await callback.bot.send_media_group(chat_id=settings.auction_channel_id, media=media)
#             except Exception:
#                 logger.exception("confirm_publish: failed to send media_group to channel")
#
#         try:
#             await callback.bot.send_message(settings.auction_channel_id, text.as_html())
#         except Exception:
#             logger.exception("confirm_publish: failed to send message to channel")
#
#         # –∑–∞–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞
#         try:
#             asyncio.create_task(start_auction(lot.id, callback.bot))
#         except Exception:
#             logger.exception("confirm_publish: failed to start auction task")
#
#         try:
#             await callback.message.answer("‚úÖ –õ–æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –¢–æ—Ä–≥–∏ –Ω–∞—á–Ω—É—Ç—Å—è —á–µ—Ä–µ–∑ {} –º–∏–Ω—É—Ç.".format(settings.auction_duration_minutes), reply_markup=main_menu)
#         except Exception:
#             try:
#                 await callback.answer("‚úÖ –õ–æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", show_alert=True)
#             except Exception:
#                 pass
#
#     except Exception:
#         logger.exception("confirm_publish: unexpected error while saving/publishing lot for user %s", callback.from_user.id)
#         try:
#             await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
#         except Exception:
#             try:
#                 await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–æ—Ç.", show_alert=True)
#             except Exception:
#                 pass
#     finally:
#         await state.clear()

@router.message(F.text == "‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞")
async def rules_handler(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –ê—É–∫—Ü–∏–æ–Ω ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å üì±\n"
        "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ üì∏\n"
        "3. –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä üìù\n\n"
        "‚ùó –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ—Ç –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è!",
        reply_markup=main_menu
    )
    file = FSInputFile(r"C:\Users\kachu\Downloads\public_offer_full.pdf")
    await message.answer_document(file, caption="–í–æ—Ç –≤–∞—à–∞ –ø—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ üìÑ")



#oooooooooooooooooooooooo
# import asyncio
# import re
# from io import BytesIO
# from PIL import Image, ImageStat
# import pytesseract
# from aiogram import Bot, Dispatcher, F, Router
# from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import StatesGroup, State
# from aiogram.filters import CommandStart
#
# MODEL_PRICES = {
#     "iPhone 12": 85000,
#     "iPhone 12 Pro": 120000,
#     "iPhone 13": 150000,
#     "iPhone 13 Pro": 180000,
#     "Samsung Galaxy S21": 90000,
#     "Samsung Galaxy S22": 130000
# }
#
# def models_kb():
#     return ReplyKeyboardMarkup(
#         keyboard=[[KeyboardButton(text=m)] for m in MODEL_PRICES],
#         resize_keyboard=True
#     )
#
# def finish_photos_kb():
#     return ReplyKeyboardMarkup(
#         keyboard=[
#             [KeyboardButton(text="‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ")],
#         ],
#         resize_keyboard=True
#     )
#
# # ==== –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ç–æ ====
# def is_unique_photo(file_bytes: bytes, existing_hashes: set) -> bool:
#     # import hashlib
#     # photo_hash = hashlib.md5(file_bytes).hexdigest()
#     # if photo_hash in existing_hashes:
#     #     return False
#     # existing_hashes.add(photo_hash)
#     return True
#
# def is_good_quality(image: Image.Image, min_width=400, min_height=400, min_brightness=30) -> bool:
#     # if image.width < min_width or image.height < min_height:
#     #     return False
#     # stat = ImageStat.Stat(image.convert("L"))
#     # brightness = stat.mean[0]
#     # if brightness < min_brightness:
#     #     return False
#     return True
#
# def extract_imei_from_image(image: Image.Image) -> str | None:
#     text = pytesseract.image_to_string(image)
#     matches = re.findall(r"\b\d{15}\b", text)
#     return matches[0] if matches else None
#
# # ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ====
# @router.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ 30 –º–∏–Ω—É—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤?", reply_markup=main_menu())
#
# @router.message(F.text == "üì§ –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å")
# async def choose_model(message: Message, state: FSMContext):
#     await message.answer("üì± –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=models_kb())
#     await state.set_state(SellerStates.model)
#
# @router.message(SellerStates.model)
# async def set_model(message: Message, state: FSMContext):
#     model = message.text
#     if model not in MODEL_PRICES:
#         await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=models_kb())
#         return
#     start_price = MODEL_PRICES[model]
#     await state.update_data(model=model, price=start_price, photos=[], photo_hashes=set())
#     await message.answer(f"‚úÖ –ú–æ–¥–µ–ª—å: {model}\nüí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price} ‚Ç∏\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 3).", reply_markup=finish_photos_kb())
#     await state.set_state(SellerStates.photos)
#
# @router.message(SellerStates.photos, F.photo)
# async def collect_photos(message: Message, state: FSMContext):
#     data = await state.get_data()
#     photos = data.get("photos", [])
#     photo_hashes = data.get("photo_hashes", set())
#
#     file = await message.bot.get_file(message.photo[-1].file_id)
#     file_bytes = await message.bot.download_file(file.file_path)
#     file_bytes_data = file_bytes.read()
#
#     img = Image.open(BytesIO(file_bytes_data))
#
#     if not is_unique_photo(file_bytes_data, photo_hashes):
#         await message.answer("‚ö† –≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
#         return
#     if not is_good_quality(img):
#         await message.answer("‚ö† –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–ª–∏ —Ç–µ–º–Ω–æ–µ. –ü—Ä–∏—à–ª–∏—Ç–µ –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ.")
#         return
#
#     photos.append(message.photo[-1].file_id)
#     await state.update_data(photos=photos, photo_hashes=photo_hashes)
#
#     await message.answer(f"üì∏ –§–æ—Ç–æ {len(photos)} –ø–æ–ª—É—á–µ–Ω–æ. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3.")
#
# @router.message(SellerStates.photos, F.text == "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ")
# async def enough_photos(message: Message, state: FSMContext):
#     data = await state.get_data()
#     if len(data.get("photos", [])) < 3:
#         await message.answer("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ñ–æ—Ç–æ.")
#         return
#     await message.answer("üì∑ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —ç–∫—Ä–∞–Ω–∞ —Å IMEI.")
#     await state.set_state(SellerStates.imei)
#
# @router.message(SellerStates.imei, F.photo)
# async def handle_imei_photo(message: Message, state: FSMContext):
#     file = await message.bot.get_file(message.photo[-1].file_id)
#     file_bytes = await message.bot.download_file(file.file_path)
#     img = Image.open(BytesIO(file_bytes.read()))
#     imei = 444444444
#     # imei = extract_imei_from_image(img)
#     # if not imei:
#     #     await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å IMEI. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
#     #     return
#     await state.update_data(imei=imei)
#     await message.answer(f"‚úÖ IMEI –ø–æ–ª—É—á–µ–Ω: {imei}\n\n–£–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 128GB).")
#     await state.set_state(SellerStates.memory)
#
# @router.message(SellerStates.memory)
# async def set_memory(message: Message, state: FSMContext):
#     await state.update_data(memory=message.text)
#     await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –ø–æ–∫—É–ø–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
#     await state.set_state(SellerStates.year)
#
# @router.message(SellerStates.year)
# async def set_year(message: Message, state: FSMContext):
#     await state.update_data(year=message.text)
#     await message.answer("üì¶ –û–ø–∏—à–∏—Ç–µ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
#     await state.set_state(SellerStates.condition)
#
# @router.message(SellerStates.condition)
# async def set_condition(message: Message, state: FSMContext):
#     await state.update_data(condition=message.text)
#     await message.answer("üîã –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ (–≤ % –∏–ª–∏ —Å–ª–æ–≤–∞—Ö):")
#     await state.set_state(SellerStates.battery)
#
# @router.message(SellerStates.battery)
# async def set_battery(message: Message, state: FSMContext):
#     await state.update_data(battery=message.text)
#     await message.answer("üõ† –ë—ã–ª –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ä–µ–º–æ–Ω—Ç–µ? (–î–∞/–ù–µ—Ç):")
#     await state.set_state(SellerStates.repairs)
#
# @router.message(SellerStates.repairs)
# async def set_repairs(message: Message, state: FSMContext):
#     await state.update_data(repairs=message.text)
#     await message.answer("üíß –ü–∞–¥–∞–ª –ª–∏ –≤ –≤–æ–¥—É? (–î–∞/–ù–µ—Ç):")
#     await state.set_state(SellerStates.water)
#
# @router.message(SellerStates.water)
# async def set_water(message: Message, state: FSMContext):
#     await state.update_data(water=message.text)
#     await message.answer("üîí –ù–µ—Ç –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Apple ID/Google? (–î–∞/–ù–µ—Ç):")
#     await state.set_state(SellerStates.locks)
#
# @router.message(SellerStates.locks)
# async def set_locks(message: Message, state: FSMContext):
#     await state.update_data(locks=message.text)
#     data = await state.get_data()
#
#     lot_summary = (
#         f"üì± –ú–æ–¥–µ–ª—å: {data['model']}\n"
#         f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {data['price']} ‚Ç∏\n"
#         f"üÜî IMEI: {data['imei']}\n"
#         f"üíæ –ü–∞–º—è—Ç—å: {data['memory']}\n"
#         f"üìÖ –ì–æ–¥: {data['year']}\n"
#         f"üì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {data['condition']}\n"
#         f"üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {data['battery']}\n"
#         f"üõ† –†–µ–º–æ–Ω—Ç: {data['repairs']}\n"
#         f"üíß –í–æ–¥–∞: {data['water']}\n"
#         f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {data['locks']}\n"
#         f"üì∑ –§–æ—Ç–æ: {len(data['photos'])} —à—Ç."
#     )
#
#     await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n" + lot_summary + "\n\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é...")
#     await state.clear()
