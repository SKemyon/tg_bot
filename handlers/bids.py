from aiogram import Router, Bot, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from sqlalchemy.future import select
from sqlalchemy import desc
from collections import defaultdict
import asyncio

from database import async_session
from models import Lot, Bid, Watcher
from states import BidStates

CHANNEL_ID = -1002896763134

# –û—á–µ—Ä–µ–¥–∏ —Å—Ç–∞–≤–æ–∫ –ø–æ lot_id
lot_bid_queues = defaultdict(asyncio.Queue)

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ)
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message):
    support_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/+77778032236")]
        ]
    )
    await message.answer(
        "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:",
        reply_markup=support_keyboard
    )

# –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ—Ç–∞
def format_lot_card(lot):
    price = lot.current_price or lot.start_price
    return (
        f"üì¶ <b>{lot.title}</b>\n"
        f"üìù {lot.condition}\n"
        f"üõ† –†–µ–º–æ–Ω—Ç:{lot.repairs}\n"
        f"üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {lot.battery}\n"
        f"üíæ –ü–∞–º—è—Ç—å: {lot.memory}\n"
        f"üìÖ –ì–æ–¥ –ø–æ–∫—É–ø–∫–∏: {lot.year}\n"
        f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {lot.locks}\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {price}‚ÇΩ\n"
        f"üÜî ID: <code>{lot.id}</code>"
    )

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫
def get_bid_buttons(current_price: int, lot_id: int):
    increments = [100, 500, 1000]
    bid_buttons = [
        InlineKeyboardButton(
            text=f"üí∏ +{inc}‚ÇΩ (–∏—Ç–æ–≥–æ {current_price + inc}‚ÇΩ)",
            callback_data=f"bid_{lot_id}_{inc}"
        )
        for inc in increments
    ]
    return InlineKeyboardMarkup(
        inline_keyboard=[
            bid_buttons
        ]
    )

@router.message(CommandStart(deep_link=True))
async def handle_start_with_lot(message: Message, command: CommandObject):
    if command.args and command.args.startswith("lot_"):
        lot_id = int(command.args.split("_")[1])

        async with async_session() as session:
            lot = await session.get(Lot, lot_id)
            if not lot:
                await message.answer("‚ùå –õ–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu)
                return

            existing = await session.execute(
                select(Watcher).filter_by(lot_id=lot_id, user_id=message.from_user.id)
            )
            if existing.scalars().first():
                await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –ª–æ—Ç.", reply_markup=main_menu)
                return

            session.add(Watcher(lot_id=lot_id, user_id=message.from_user.id))
            await session.commit()

            await message.answer(
                "‚ÑπÔ∏è –ê—É–∫—Ü–∏–æ–Ω ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"
                "1.–£—á–∞—Å—Ç–≤—É—è –≤ —Ç–æ—Ä–≥–∞—Ö, –≤—ã –æ–±—è–∑—É–µ—Ç–µ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å –ª–æ—Ç–≤ —Å–ª—É—á–∞–µ –í–∞—à–µ–π –ø–æ–±–µ–¥—ã.\n"
                "2.–í —Å–ª—É—á–∞–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–æ–±–µ–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤–∑–∏–º–∞–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ 1% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏.\n"
                "3.–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —É—Å–ø–µ—à–Ω—É—é —Å–¥–µ–ª–∫—É 1%\n"
                "4.–°–¥–µ–ª–∫–∞ –∏ —Ä–∞—Å—á—ë—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º. –í —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
                "5.–ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –≤–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞—è –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∞—É–∫—Ü–∏–æ–Ω–∞(–ø–æ–±–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–∞–≤–∏–ª–∞"
            )

            await message.answer(
                f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ª–æ—Ç:\n\n{format_lot_card(lot)}",
                reply_markup=get_bid_buttons(lot.current_price or lot.start_price, lot_id),
                parse_mode="HTML"
            )

            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤")
async def handle_list_auctions(message: Message):
    async with async_session() as session:
        result = await session.execute(
            select(Lot).where(Lot.auction_ended == False)
        )
        lots = result.scalars().all()

    if not lots:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.", reply_markup=main_menu)
        return

    for lot in lots:
        await message.answer(format_lot_card(lot), parse_mode="HTML")

    await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ª–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.", reply_markup=main_menu)

@router.message(F.text.regexp(r"^\d+$"))
async def watch_lot(message: Message):
    lot_id = int(message.text)

    async with async_session() as session:
        lot = await session.get(Lot, lot_id)
        if not lot:
            await message.answer("‚ùå –õ–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu)
            return

        existing = await session.execute(
            select(Watcher).filter_by(lot_id=lot_id, user_id=message.from_user.id)
        )
        if existing.scalars().first():
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –ª–æ—Ç.", reply_markup=main_menu)
            return

        session.add(Watcher(lot_id=lot_id, user_id=message.from_user.id))
        await session.commit()

        await message.answer(
            "‚ÑπÔ∏è –ê—É–∫—Ü–∏–æ–Ω ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω.\n\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å üì±\n"
            "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ üì∏\n"
            "3. –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä üìù\n\n"
            "‚ùó –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ—Ç –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è!"
        )

        await message.answer(
            f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ª–æ—Ç:\n\n{format_lot_card(lot)}",
            reply_markup=get_bid_buttons(lot.current_price or lot.start_price, lot_id),
            parse_mode="HTML"
        )

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@router.callback_query(F.data.startswith("bid_"))
async def process_bid(callback: CallbackQuery):
    try:
        bot = callback.bot
        user_id = callback.from_user.id
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status in ("left", "kicked"):
            await callback.answer("üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–∞—Ö.", show_alert=True)
            return
    except TelegramBadRequest:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
        return

    try:
        _, lot_id_str, inc_str = callback.data.split("_")
        lot_id = int(lot_id_str)
        inc = int(inc_str)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    await lot_bid_queues[lot_id].put((callback, inc))

    if lot_bid_queues[lot_id].qsize() == 1:
        asyncio.create_task(process_lot_bids(lot_id))

async def process_lot_bids(lot_id: int):
    while not lot_bid_queues[lot_id].empty():
        callback, inc = await lot_bid_queues[lot_id].get()
        user_id = callback.from_user.id

        async with async_session() as session:
            lot = await session.get(Lot, lot_id)
            if not lot:
                await callback.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                lot_bid_queues[lot_id].task_done()
                continue

            if lot.auction_ended:
                await callback.answer("‚è≥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω.", show_alert=True)
                lot_bid_queues[lot_id].task_done()
                continue

            if not lot.auction_started:
                await callback.answer("‚åõ –ê—É–∫—Ü–∏–æ–Ω –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è.", show_alert=True)
                lot_bid_queues[lot_id].task_done()
                continue

            current_price = lot.current_price or lot.start_price
            new_price = current_price + inc

            highest_bid_res = await session.execute(
                select(Bid).filter_by(lot_id=lot_id).order_by(desc(Bid.amount)).limit(1)
            )
            highest_bid = highest_bid_res.scalars().first()
            if highest_bid and new_price <= highest_bid.amount:
                await callback.answer(f"‚ö†Ô∏è –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {highest_bid.amount}‚ÇΩ.", show_alert=True)
                lot_bid_queues[lot_id].task_done()
                continue

            session.add(Bid(lot_id=lot_id, user_id=user_id, amount=new_price))
            lot.current_price = new_price
            await session.commit()

        await callback.answer(f"‚úÖ –°—Ç–∞–≤–∫–∞ {new_price}‚ÇΩ –ø—Ä–∏–Ω—è—Ç–∞.", show_alert=True)
        await callback.message.answer(f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {new_price} –ø—Ä–∏–Ω—è—Ç–∞.")
        bot = callback.bot
        async with async_session() as session:
            watchers_res = await session.execute(
                select(Watcher).filter_by(lot_id=lot_id)
            )
            watchers_list = watchers_res.scalars().all()

            for w in watchers_list:
                if w.user_id != user_id:
                    try:
                        await bot.send_message(w.user_id, f"üì¢ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ –ª–æ—Ç—É #{lot_id}: {new_price}‚ÇΩ")
                    except:

                        pass

            try:
                await bot.send_message(lot.seller_id, f"üì¢ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –ª–æ—Ç—É #{lot_id}: {new_price}‚ÇΩ")
            except:
                pass

        await asyncio.sleep(1)
        lot_bid_queues[lot_id].task_done()
